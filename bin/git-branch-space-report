#!/usr/bin/env bash
#
# git-branch-space-report.sh
#
# Estimate how much unique data each branch keeps alive compared to a base branch.
#
# Usage:
#   ./git-branch-space-report.sh
#   ./git-branch-space-report.sh <base>
#   ./git-branch-space-report.sh <base> <branch1> <branch2> ...
#   ./git-branch-space-report.sh --remote [...]
#

set -euo pipefail

INCLUDE_REMOTE=false

# Parse --remote flag
if [ "${1:-}" = "--remote" ]; then
    INCLUDE_REMOTE=true
    shift
fi

# Determine base and branches
if [ $# -eq 0 ]; then
    BASE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if $INCLUDE_REMOTE; then
        BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/remotes/ | grep -v "^$BASE_BRANCH$")
    else
        BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/heads/ | grep -v "^$BASE_BRANCH$")
    fi
elif [ $# -eq 1 ]; then
    BASE_BRANCH="$1"
    if $INCLUDE_REMOTE; then
        BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/remotes/ | grep -v "^$BASE_BRANCH$")
    else
        BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/heads/ | grep -v "^$BASE_BRANCH$")
    fi
else
    BASE_BRANCH="$1"
    shift
    BRANCHES="$@"
fi

# Validate base branch
if ! git rev-parse --verify "$BASE_BRANCH" >/dev/null 2>&1; then
    echo "Error: base branch '$BASE_BRANCH' not found."
    exit 1
fi

echo "Analyzing branches (base: $BASE_BRANCH)..."
echo

# Header
printf "%-40s %15s\n" "Branch" "Unique Size (MB)"
echo "-------------------------------------------------------------"

# Loop over branches
for branch in $BRANCHES; do
    if ! git rev-parse --verify "$branch" >/dev/null 2>&1; then
        echo "Warning: branch '$branch' not found, skipping."
        continue
    fi

    size_bytes=$(git rev-list --objects "$BASE_BRANCH..$branch" \
        | awk '{print $1}' \
        | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize)' \
        | awk '/^blob/ {sum += $3} END {print sum+0}')

    size_mb=$(awk -v s="$size_bytes" 'BEGIN {printf "%.2f", s/1024/1024}')

    printf "%-40s %15s\n" "$branch" "$size_mb"
done | sort -k2 -nr
