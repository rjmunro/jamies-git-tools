#!/bin/bash

# watch-ci
# Copyright (c) 2025 Robert (Jamie) Munro
# Licensed under the MIT License
#
# Watch the CI status of a branch and notify when it's done
# Usage: watch-ci [branch]
# If no branch is specified, it will use the current branch
#
# Part of Jamie's Git Tools: https://github.com/rjmunro/jamies-git-tools

set -euo pipefail
# Requires: hub (https://github.com/github/hub)
# Uses osascript and say from macOS to display notifications and speak the status
# Requires: notify-send or zenity for Linux to display notifications

QUIET=false
BRANCH=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --quiet|-q)
      QUIET=true
      shift
      ;;
    --help|-h)
      echo "Usage: $0 [--quiet] [branch]"
      echo ""
      echo "Watch the CI status of a branch and notify when it's done."
      echo ""
      echo "Options:"
      echo "  --quiet, -q    Suppress audio notifications"
      echo "  --help, -h     Show this help"
      echo ""
      echo "Arguments:"
      echo "  branch         Branch to monitor (default: current branch)"
      exit 0
      ;;
    -*)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
    *)
      if [[ -z "$BRANCH" ]]; then
        BRANCH="$1"
      else
        echo "Error: Multiple branch names provided"
        exit 1
      fi
      shift
      ;;
  esac
done

# If no branch specified, use current branch
if [[ -z "$BRANCH" ]]; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi

PROJECT="$(basename "$(git rev-parse --show-toplevel)")"
SHORT_BRANCH="${BRANCH#rjmunro/}"

EXIT_CODE=0
STATUS=$(hub ci-status "$BRANCH" || EXIT_CODE=$?)

# Retry loop
TRIES=0
MAX_INITIAL_TRIES=5

while true; do
  if { [ "$TRIES" -lt "$MAX_INITIAL_TRIES" ] && { [ "$STATUS" = "no status" ] || [ "$STATUS" = "pending" ]; }; } \
     || { [ "$TRIES" -ge "$MAX_INITIAL_TRIES" ] && [ "$STATUS" = "pending" ]; }; then
    echo "$STATUS ($BRANCH)"
    sleep 15
    STATUS=$(hub ci-status "$BRANCH" || EXIT_CODE=$?)
    TRIES=$((TRIES + 1))
  else
    break
  fi
done

echo "$STATUS ($BRANCH)"

# Open the pull request page in the browser
hub pr show -h "$BRANCH" || hub compare "$BRANCH"

# If we are on MacOS, use `terminal-notifier` to display a notification and `say` to speak say the status
if [ "$(uname)" = "Darwin" ]; then
  terminal-notifier -title "CI Status for $PROJECT" -message "Branch $SHORT_BRANCH CI Status: $STATUS"
  if [[ "$QUIET" != "true" ]]; then
    say "CI done on branch $SHORT_BRANCH. Status: $STATUS"
  fi
  exit $EXIT_CODE
fi

# If notify-send is available, use it to display a notification
if command -v notify-send &> /dev/null; then
  notify-send "Branch $SHORT_BRANCH CI Status: $STATUS" "CI Status"

# If notify-send is not available, use zenity to display a notification
elif command -v zenity &> /dev/null; then
  zenity --notification --text "Branch $SHORT_BRANCH CI Status: $STATUS" --title "CI Status"

# If we are on Windows, use PowerShell to display a notification
elif [ "$(uname)" = "MINGW64_NT-10.0" ]; then
  powershell -Command "New-BurntToastNotification -Text 'Branch $SHORT_BRANCH CI Status: $STATUS'"
  if [[ "$QUIET" != "true" ]]; then
    powershell -Command "Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('CI done on branch $SHORT_BRANCH. Status: $STATUS')"
  fi
fi
exit $EXIT_CODE
