#!/bin/bash

# watch-ci
# Copyright (c) 2025 Robert (Jamie) Munro
# Licensed under the MIT License
#
# Watch the CI status of a branch and notify when it's done
# Usage: watch-ci [branch]
# If no branch is specified, it will use the current branch
#
# Part of Jamie's Git Tools: https://github.com/rjmunro/jamies-git-tools

set -euo pipefail
# Requires: hub (https://github.com/github/hub)
# Uses osascript and say from macOS to display notifications and speak the status
# Requires: notify-send or zenity for Linux to display notifications

QUIET=false
BRANCHES=()

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --quiet|-q)
      QUIET=true
      shift
      ;;
    --help|-h)
      echo "Usage: $0 [--quiet] [branch1] [branch2] ..."
      echo ""
      echo "Watch the CI status of one or more branches and notify when they're done."
      echo ""
      echo "Options:"
      echo "  --quiet, -q    Suppress audio notifications"
      echo "  --help, -h     Show this help"
      echo ""
      echo "Arguments:"
      echo "  branch         Branch(es) to monitor (default: current branch)"
      echo ""
      echo "Examples:"
      echo "  $0                    # Monitor current branch"
      echo "  $0 feature-branch     # Monitor one branch"
      echo "  $0 main develop       # Monitor multiple branches"
      echo "  $0 --quiet branch1 branch2  # Monitor quietly"
      exit 0
      ;;
    -*)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
    *)
      BRANCHES+=("$1")
      shift
      ;;
  esac
done

# If no branches specified, use current branch
if [[ ${#BRANCHES[@]} -eq 0 ]]; then
  BRANCHES=($(git rev-parse --abbrev-ref HEAD))
fi

# Check if hub is available
if ! command -v hub >/dev/null 2>&1; then
  echo "Error: 'hub' command not found. Please install hub: https://github.com/github/hub"
  exit 1
fi

PROJECT="$(basename "$(git rev-parse --show-toplevel)")"

# Function to send notification for a completed branch
send_notification() {
  local branch="$1"
  local status="$2"
  local short_branch="${branch#rjmunro/}"

  # If we are on MacOS, use `terminal-notifier` to display a notification and `say` to speak the status
  if [ "$(uname)" = "Darwin" ]; then
    terminal-notifier -title "CI Status for $PROJECT" -message "Branch $short_branch CI Status: $status"
    if [[ "$QUIET" != "true" ]]; then
      say "CI done on branch $short_branch. Status: $status"
    fi

  # If notify-send is available, use it to display a notification
  elif command -v notify-send &> /dev/null; then
    notify-send "Branch $short_branch CI Status: $status" "CI Status"

  # If notify-send is not available, use zenity to display a notification
  elif command -v zenity &> /dev/null; then
    zenity --notification --text "Branch $short_branch CI Status: $status" --title "CI Status"

  # If we are on Windows, use PowerShell to display a notification
  elif [ "$(uname)" = "MINGW64_NT-10.0" ]; then
    powershell -Command "New-BurntToastNotification -Text 'Branch $short_branch CI Status: $status'"
    if [[ "$QUIET" != "true" ]]; then
      powershell -Command "Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('CI done on branch $short_branch. Status: $status')"
    fi
  fi
}

# Function to open PR page for a branch
open_pr_page() {
  local branch="$1"
  echo "Opening PR page for $branch..."
  hub pr show -h "$branch" || hub compare "$branch"
}

# Initialize tracking
PENDING_BRANCHES=()      # Array of branches still being monitored
COMPLETED_BRANCHES=()    # Array of completed branches
OVERALL_EXIT_CODE=0

# Initialize all branches
for branch in "${BRANCHES[@]}"; do
  PENDING_BRANCHES+=("$branch")
  echo "Starting to monitor: $branch"
done

# Constants
MAX_INITIAL_TRIES=5      # How many 15-second cycles to wait for "no status" branches
GLOBAL_TRIES=0           # Global counter for initial "no status" period

# Main monitoring loop
while [[ ${#PENDING_BRANCHES[@]} -gt 0 ]]; do
  NEW_PENDING=()

  # Check each pending branch
  for branch in "${PENDING_BRANCHES[@]}"; do
    EXIT_CODE=0
    STATUS=$(hub ci-status "$branch" 2>/dev/null || EXIT_CODE=$?)

    # Determine if this branch should continue being monitored
    if [ "$STATUS" = "pending" ] || { [ "$GLOBAL_TRIES" -lt "$MAX_INITIAL_TRIES" ] && [ "$STATUS" = "no status" ]; }; then
      # Still pending, keep monitoring
      echo "$STATUS ($branch)"
      NEW_PENDING+=("$branch")
      GLOBAL_TRIES=$((GLOBAL_TRIES + 1))
      sleep 15
    else
      # Branch completed (success, failure, or error)
      echo "$STATUS ($branch) - COMPLETED"
      COMPLETED_BRANCHES+=("$branch")

      # Send notification
      send_notification "$branch" "$STATUS"

      # Open PR page for this branch
      open_pr_page "$branch"

      # Track exit code (non-zero if any branch failed)
      if [[ $EXIT_CODE -ne 0 ]]; then
        OVERALL_EXIT_CODE=$EXIT_CODE
      fi
    fi
  done

  # Update pending branches array
  PENDING_BRANCHES=("${NEW_PENDING[@]}")
done

# If the number of completed branches is more than one, give a final summary
if [[ ${#COMPLETED_BRANCHES[@]} -gt 1 ]]; then
  echo ""
  echo "All branches completed!"
  echo "Completed branches: ${COMPLETED_BRANCHES[*]}"
fi

exit $OVERALL_EXIT_CODE
